# WSGI CONFIGURATION FILE

[DEFAULT]
debug=${instance:debug}

[composite:main]
use=egg:Paste#urlmap
/media/=pmedia
/mobyle2=pmain
/threads=watch_threads
/velruse = pvelruse
/apex/static = apexapp

[pipeline:pmain]
pipeline= fvhm exc translogger retry tm projectapp

[pipeline:pvelruse]
pipeline= fvhm exc translogger retry tm velruse

[pipeline:pmedia]
pipeline= fvhm translogger exc staticapp

[filter:retry]
use = egg:repoze.retry#retry
tries = 2
# retryable = mypackage.exceptions:SomeRetryableException

[filter:tm]
use = egg:repoze.tm2#tm

[app:watch_threads]
use=egg:Paste#watch_threads

[filter:fvhm]
use = egg:repoze.vhm#vhm_xheaders

[filter:translogger]
use=egg:Paste#translogger
setup_console_handler = False
logger_name = wsgi

[filter:debug]
use=egg:Paste#printdebug

[filter:exc]
use=egg:WebError#evalerror


[app:velruse]
use=egg:velruse
# velruse (Â§OPENID services authentication configuration)
velruse.store=velruse.store.sqlstore
velruse.store.url = ${db:scheme}://${db:user}:${db:password}@${db:host}:${db:port}/${db:name}
velruse.store.echo = ${instance:debug}
velruse.store.echo_pool = ${instance:debug}
velruse.store.pool_recycle = 10
velruse.end_point=http://${instance:host}:${instance:port}/auth/apex_callback
velruse.providers_hook=mobyle2.core.velruse.velruse_config
velruse.providers=
#    velruse.providers.github

# OpenID storage required by:
# google, yahoo and openid providers
# velruse.openid.store =
# velruse.openid.realm =

# Bitbucket
#velruse.bitbucket.consumer_key =
#velruse.bitbucket.consumer_secret =
#velruse.bitbucket.authorize = true

# Facebook
#velruse.facebook.app_id =
#velruse.facebook.app_secret =
#velruse.facebook.scope =

# Github
# velruse.github.app_id =6108e3a51693bc0f7eb9
# velruse.github.app_secret = 67b1c8cdc93f306021483de548561907a7b2d355
# velruse.github.scope =

# Google (also requires OpenID configuration)
#velruse.google.consumer_key =
#velruse.google.consumer_secret =
#velruse.google.oauth_scope =

# LinkedIn
#velruse.linkedin.consumer_key =
#velruse.linkedin.consumer_secret =
#velruse.linkedin.authorize =

# Microsoft Live
#velruse.live.client_id =
#velruse.live.client_secret =
#velruse.live.scope =

# Twitter
#velruse.twitter.consumer_key =
#velruse.twitter.consumer_secret =
#velruse.twitter.authorize =

# Yahoo (also requires OpenID configuration)
#velruse.yahoo.consumer_key =
#velruse.yahoo.consumer_secret =


[app:projectapp]
use=egg:${instance:ep}
sqlalchemy.url = ${db:scheme}://${db:user}:${db:password}@${db:host}:${db:port}/${db:name}
sqlalchemy.echo = ${instance:debug}
sqlalchemy.echo_pool = ${instance:debug}
available_languages = fr en
sqlalchemy.pool_recycle = 10
zcmls=
# indicate here full path to zcmls or
# relative path inside your egg

# beaker
session.type = file
session.data_dir = ${buildout:directory}/var/tmp/sessions/data
session.lock_dir = ${buildout:directory}/var/tmp/sessions/lock
session.key = mykey
session.secret = mysecret
session.cookie_on_exception = true

# apex configuration
# recaptacha use localhost as defaualt domain
# TODO: generate config with the key pair inside the website
apex.recaptcha_public_key = 6LdxtMkSAAAAAJulw1X4oD7U8zuh9NA9pzrIKAxu
apex.recaptcha_private_key = 6LdxtMkSAAAAAOZcYEvcCaOrBMwJKqqV5hf4gigZ
apex.session_secret = CHANGEME
apex.auth_secret = CHANGEME
apex.came_from_route = redirect_after_login
apex.use_apex_edit=true
apex.auth_profile=true
apex.apex_template = apex:templates/apex_template.pt
apex.form_template = apex:templates/forms/tableform.pt
apex.register_form_class=mobyle2.core.forms.RegisterForm
apex.velruse_url = http://${hosts:velruse}:${ports:velruse}/${velruseapp}


pyramid.includes=
#with_pyramid_extdirect
    pyramid_extdirect
#with_pyramid_zcml
    pyramid_zcml
#with_pyramid_debugtoolbar
    pyramid_debugtoolbar

# various addons pre configurations
mako.directories=${instance:egg}:templates
pyramid.debug_all=${instance:debug}
pyramid.debug_authorization =${instance:debug}
pyramid.debug_notfound= ${instance:debug}
pyramid.debug_routematch=${instance:debug}
pyramid.debug_templates=${instance:debug}
pyramid.reload_all=${instance:debug}
pyramid.reload_assets=${instance:debug}
pyramid.reload_resources=${instance:debug}
pyramid.reload_templates=${instance:debug}

#debug toolbar
debugtoolbar.intercept_exc=${instance:intercept_exc_debug}
debugtoolbar.eval_exc=${instance:debug}
debugtoolbar.enabled=${instance:debug}

[app:apexapp]
use = egg:Paste#pkg_resources
egg=apex
resource_name=static/

[app:staticapp]
use = egg:Paste#pkg_resources
egg=${instance:egg}
resource_name=static/

[loggers]
keys = root,wsgi,routes

[handlers]
keys = fconsole,console,accesslog,errorlog

[formatters]
keys = generic,accesslog

# Send warnings that are not caught by other loggers to the console
[logger_root]
level = NOTSET
handlers = console,fconsole

# Send all messages to the 'wsgi' logger to the accesslog and errorlog handlers
[logger_wsgi]
level = NOTSET
handlers = accesslog,errorlog,console,fconsole
qualname = wsgi
propagate = 0

# Routes (the URL dispatcher) sends debug information to the 'routes.middleware' logger
# with DEBUG level.
[logger_routes]
level = NOTSET
handlers = console,fconsole
qualname = routes.middleware
propagate = 0

# Handler for printing messages to the console
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = INFO
formatter = generic

# Handler for writing access.log style log lines to an "access.log" file
[handler_fconsole]
class = FileHandler
args = ('${buildout:directory}/var/log/console.log','a')
level = INFO
formatter = generic


# Handler for writing access.log style log lines to an "access.log" file
[handler_accesslog]
class = FileHandler
args = ('${buildout:directory}/var/log/access.log','a')
level = INFO
formatter = accesslog

# Handler for writing error messages to an "error.log" file
[handler_errorlog]
class = FileHandler
args = ('${buildout:directory}/var/log/error.log','a')
level = WARNING
formatter = generic

# A generic formatter that prints the time, the logger's name, the level and the message
[formatter_generic]
format = %(asctime)s %(name)s[%(levelname)s] %(message)s

# A trivial formatter that just passes-through the log message.
# Translogger already creates Apache-style log messages. No need to change that.
[formatter_accesslog]
format = %(message)s

[server:main]
use = ${instance:http}
host=${host}
port=${port}

# vim:set et ts=4 sts=4 ft=cfg:
